'$Badger2MCap' = TORN_Tokens*4,
Val5MCap = TORN_Tokens*10,
Val10MCap = TORN_Tokens*20,
'MIR17MCap' = TORN_Tokens*34,
Val25MCap = TORN_Tokens*50,
Val50MCap = TORN_Tokens*100,
Val100MCap = TORN_Tokens*200,
'$Inch164MCap' = TORN_Tokens*328,
Val250MCap = TORN_Tokens*500,
Val500MCap = TORN_Tokens*1000,
'$UNI734MCap' = TORN_Tokens*1468,
Val1BCap = TORN_Tokens*2000) %>%
mutate_if(is.numeric, round, 2)
summary <- cap %>%
gather() %>%
group_by(key) %>%
summarise(Max = max(value),
'90%-tile' = quantile(value, 0.9),
'70%-tile' = quantile(value, 0.75),
Median = mean(value),
'25%-tile' = quantile(value, 0.25),
'10%-tile' = quantile(value,0.1),
Min = min(value)) %>%
column_to_rownames(var="key")
summary_t <- t(summary)
summary_t <- as.data.frame(summary_t) %>%
select(TORN_Tokens,
Val1MCap,
'$Badger2MCap',
Val5MCap,
Val10MCap,
'MIR17MCap',
Val25MCap,
Val50MCap,
Val100MCap,
'$Inch164MCap',
Val250MCap,
Val500MCap,
'$UNI734MCap',
Val1BCap)
colortile <- function(min.color = "lightpink", max.color = "lightgreen", fun = "currency") {
fun <- match.fun(fun)
formatter("span", x ~ fun(x),
style = function(y) style(
display = "block",
direction = "rtl",
"border-radius" = "4px",
"padding-right" = "2px",
"background-color" = csscolor(gradient(as.numeric(y),min.color='lightpink', max.color = 'lightgreen'))
)
)
}
formattable(summary_t,
lapply(1:nrow(summary_t), function(row) {
area(row, col = -1) ~ colortile()
}
)
)
cap <- torn %>%
select(TORN_Tokens) %>%
mutate(Val1MCap = TORN_Tokens*2,
'$Badger2MCap' = TORN_Tokens*4,
Val5MCap = TORN_Tokens*10,
Val10MCap = TORN_Tokens*20,
'MIR17MCap' = TORN_Tokens*34,
Val25MCap = TORN_Tokens*50,
Val50MCap = TORN_Tokens*100,
Val100MCap = TORN_Tokens*200,
'$Inch164MCap' = TORN_Tokens*328,
Val250MCap = TORN_Tokens*500,
Val500MCap = TORN_Tokens*1000,
'$UNI734MCap' = TORN_Tokens*1468,
Val1BCap = TORN_Tokens*2000)
summary <- cap %>%
gather() %>%
group_by(key) %>%
summarise(Max = max(value),
'90%-tile' = quantile(value, 0.9),
'70%-tile' = quantile(value, 0.75),
Median = mean(value),
'25%-tile' = quantile(value, 0.25),
'10%-tile' = quantile(value,0.1),
Min = min(value)) %>%
column_to_rownames(var="key")
summary_t <- t(summary)
summary_t <- as.data.frame(summary_t) %>%
select(TORN_Tokens,
Val1MCap,
'$Badger2MCap',
Val5MCap,
Val10MCap,
'MIR17MCap',
Val25MCap,
Val50MCap,
Val100MCap,
'$Inch164MCap',
Val250MCap,
Val500MCap,
'$UNI734MCap',
Val1BCap)
colortile <- function(min.color = "lightpink", max.color = "lightgreen", fun = "currency") {
fun <- match.fun(fun)
formatter("span", x ~ fun(x),
style = function(y) style(
display = "block",
direction = "rtl",
"border-radius" = "4px",
"padding-right" = "2px",
"background-color" = csscolor(gradient(as.numeric(y),min.color='lightpink', max.color = 'lightgreen'))
)
)
}
formattable(summary_t,
lapply(1:nrow(summary_t), function(row) {
area(row, col = -1) ~ colortile()
}
)
)
summary_t <- as.data.frame(summary_t) %>%
mutate(TORN_Tokens = round(TORN_Tokens,2)) %>%
select(TORN_Tokens,
Val1MCap,
'$Badger2MCap',
Val5MCap,
Val10MCap,
'MIR17MCap',
Val25MCap,
Val50MCap,
Val100MCap,
'$Inch164MCap',
Val250MCap,
Val500MCap,
'$UNI734MCap',
Val1BCap)
colortile <- function(min.color = "lightpink", max.color = "lightgreen", fun = "currency") {
fun <- match.fun(fun)
formatter("span", x ~ fun(x),
style = function(y) style(
display = "block",
direction = "rtl",
"border-radius" = "4px",
"padding-right" = "2px",
"background-color" = csscolor(gradient(as.numeric(y),min.color='lightpink', max.color = 'lightgreen'))
)
)
}
formattable(summary_t,
lapply(1:nrow(summary_t), function(row) {
area(row, col = -1) ~ colortile()
}
)
)
summary <- cap %>%
gather() %>%
group_by(key) %>%
summarise(Max = max(value),
'90%-tile' = quantile(value, 0.9),
'70%-tile' = quantile(value, 0.75),
Median = mean(value),
'25%-tile' = quantile(value, 0.25),
'10%-tile' = quantile(value,0.1),
Min = min(value)) %>%
column_to_rownames(var="key")
summary_t <- t(summary)
summary_t <- as.data.frame(summary_t) %>%
mutate(TORN_Tokens = round(TORN_Tokens,2)) %>%
select(TORN_Tokens,
Val1MCap,
'$Badger2MCap',
Val5MCap,
Val10MCap,
'MIR17MCap',
Val25MCap,
Val50MCap,
Val100MCap,
'$Inch164MCap',
Val250MCap,
Val500MCap,
'$UNI734MCap',
Val1BCap)
View(summary_t)
summary <- cap %>%
gather() %>%
group_by(key) %>%
summarise(Max = max(value),
'90%-tile' = quantile(value, 0.9),
'70%-tile' = quantile(value, 0.75),
Median = mean(value),
'25%-tile' = quantile(value, 0.25),
'10%-tile' = quantile(value,0.1),
Min = min(value)) %>%
column_to_rownames(var="key")
summary_t <- t(summary)
summary_t <- as.data.frame(summary_t) %>%
mutate(TORN_Tokens = sprintf("%0.2f", TORN_Tokens))
select(TORN_Tokens,
Val1MCap,
'$Badger2MCap',
Val5MCap,
Val10MCap,
'MIR17MCap',
Val25MCap,
Val50MCap,
Val100MCap,
'$Inch164MCap',
Val250MCap,
Val500MCap,
'$UNI734MCap',
Val1BCap)
View(summary_t)
cap <- torn %>%
select(TORN_Tokens) %>%
mutate(Val1MCap = TORN_Tokens*2,
'$Badger2MCap' = TORN_Tokens*4,
Val5MCap = TORN_Tokens*10,
Val10MCap = TORN_Tokens*20,
'MIR17MCap' = TORN_Tokens*34,
Val25MCap = TORN_Tokens*50,
Val50MCap = TORN_Tokens*100,
Val100MCap = TORN_Tokens*200,
'$Inch164MCap' = TORN_Tokens*328,
Val250MCap = TORN_Tokens*500,
Val500MCap = TORN_Tokens*1000,
'$UNI734MCap' = TORN_Tokens*1468,
Val1BCap = TORN_Tokens*2000)
summary <- cap %>%
gather() %>%
group_by(key) %>%
summarise(Max = max(value),
'90%-tile' = quantile(value, 0.9),
'70%-tile' = quantile(value, 0.75),
Median = mean(value),
'25%-tile' = quantile(value, 0.25),
'10%-tile' = quantile(value,0.1),
Min = min(value)) %>%
column_to_rownames(var="key")
summary_t <- t(summary)
summary_t <- as.data.frame(summary_t) %>%
mutate(TORN_Tokens = sprintf("%0.2f", TORN_Tokens))
select(TORN_Tokens,
Val1MCap,
'$Badger2MCap',
Val5MCap,
Val10MCap,
'MIR17MCap',
Val25MCap,
Val50MCap,
Val100MCap,
'$Inch164MCap',
Val250MCap,
Val500MCap,
'$UNI734MCap',
Val1BCap)
View(summary)
summary_t <- as.data.frame(summary_t) %>%
mutate(TORN_Tokens = sprintf("%0.2f", TORN_Tokens))
summary_t <- as.data.frame(summary_t) %>%
mutate(TORN_Tokens = round(TORN_Tokens,2))
summary <- cap %>%
gather() %>%
group_by(key) %>%
summarise(Max = max(value),
'90%-tile' = quantile(value, 0.9),
'70%-tile' = quantile(value, 0.75),
Median = mean(value),
'25%-tile' = quantile(value, 0.25),
'10%-tile' = quantile(value,0.1),
Min = min(value)) %>%
column_to_rownames(var="key")
summary_t <- t(summary)
summary_t <- as.data.frame(summary_t) %>%
mutate(TORN_Tokens = round(TORN_Tokens,2))
View(summary_t)
summary_t <- t(summary)
summary_t <- as.data.frame(summary_t) %>%
rownames_to_column(., var = "rowname") %>%
mutate(TORN_Tokens = round(TORN_Tokens,2))
View(summary_t)
summary <- cap %>%
gather() %>%
group_by(key) %>%
summarise(Max = max(value),
'90%-tile' = quantile(value, 0.9),
'70%-tile' = quantile(value, 0.75),
Median = mean(value),
'25%-tile' = quantile(value, 0.25),
'10%-tile' = quantile(value,0.1),
Min = min(value)) %>%
column_to_rownames(var="key")
summary_t <- t(summary)
summary_t <- as.data.frame(summary_t) %>%
rownames_to_column(., var = "rowname") %>%
mutate_all(.,round,2)%>%
column_to_rownames(var="rowname")
select(TORN_Tokens,
Val1MCap,
'$Badger2MCap',
Val5MCap,
Val10MCap,
'MIR17MCap',
Val25MCap,
Val50MCap,
Val100MCap,
'$Inch164MCap',
Val250MCap,
Val500MCap,
'$UNI734MCap',
Val1BCap)
summary_t <- as.data.frame(summary_t) %>%
rownames_to_column(., var = "rowname") %>%
mutate_all(.,round,2)%>%
column_to_rownames(var="rowname") %>%
select(TORN_Tokens,
Val1MCap,
'$Badger2MCap',
Val5MCap,
Val10MCap,
'MIR17MCap',
Val25MCap,
Val50MCap,
Val100MCap,
'$Inch164MCap',
Val250MCap,
Val500MCap,
'$UNI734MCap',
Val1BCap)
summary_t <- as.data.frame(summary_t) %>%
rownames_to_column(., var = "rowname") %>%
mutate_all(.,round,2)
summary_t <- as.data.frame(summary_t) %>%
rownames_to_column(., var = "rowname") %>%
mutate_if(is.numeric, round, 2) %>%
column_to_rownames(var="rowname") %>%
select(TORN_Tokens,
Val1MCap,
'$Badger2MCap',
Val5MCap,
Val10MCap,
'MIR17MCap',
Val25MCap,
Val50MCap,
Val100MCap,
'$Inch164MCap',
Val250MCap,
Val500MCap,
'$UNI734MCap',
Val1BCap)
View(summary_t)
colortile <- function(min.color = "lightpink", max.color = "lightgreen", fun = "currency") {
fun <- match.fun(fun)
formatter("span", x ~ fun(x),
style = function(y) style(
display = "block",
direction = "rtl",
"border-radius" = "4px",
"padding-right" = "2px",
"background-color" = csscolor(gradient(as.numeric(y),min.color='lightpink', max.color = 'lightgreen'))
)
)
}
formattable(summary_t,
lapply(1:nrow(summary_t), function(row) {
area(row, col = -1) ~ colortile()
}
)
)
torn <- torn %>% mutate(TORN = Raw/10^(18)) %>% arrange(desc(TORN))
torn %>% summarise( sum = sum(TORN))
torn %>% ggplot(aes(x=TORN))+geom_histogram()
cap <- torn %>%
select(TORN) %>%
mutate(Val1MCap = TORN*2,
'$Badger2MCap' = TORN*4,
Val5MCap = TORN*10,
Val10MCap = TORN*20,
'MIR17MCap' = TORN*34,
Val25MCap = TORN*50,
Val50MCap = TORN*100,
Val100MCap = TORN*200,
'$Inch164MCap' = TORN*328,
Val250MCap = TORN*500,
Val500MCap = TORN*1000,
'$UNI734MCap' = TORN*1468,
Val1BCap = TORN*2000)
summary <- cap %>%
gather() %>%
group_by(key) %>%
summarise(Max = max(value),
'90%-tile' = quantile(value, 0.9),
'70%-tile' = quantile(value, 0.75),
Median = mean(value),
'25%-tile' = quantile(value, 0.25),
'10%-tile' = quantile(value,0.1),
Min = min(value)) %>%
column_to_rownames(var="key")
summary_t <- t(summary)
summary_t <- as.data.frame(summary_t) %>%
rownames_to_column(., var = "rowname") %>%
mutate_if(is.numeric, round, 2) %>%
column_to_rownames(var="rowname") %>%
select(TORN,
Val1MCap,
'$Badger2MCap',
Val5MCap,
Val10MCap,
'MIR17MCap',
Val25MCap,
Val50MCap,
Val100MCap,
'$Inch164MCap',
Val250MCap,
Val500MCap,
'$UNI734MCap',
Val1BCap)
colortile <- function(min.color = "lightpink", max.color = "lightgreen", fun = "currency") {
fun <- match.fun(fun)
formatter("span", x ~ fun(x),
style = function(y) style(
display = "block",
direction = "rtl",
"border-radius" = "4px",
"padding-right" = "2px",
"background-color" = csscolor(gradient(as.numeric(y),min.color='lightpink', max.color = 'lightgreen'))
)
)
}
formattable(summary_t,
lapply(1:nrow(summary_t), function(row) {
area(row, col = -1) ~ colortile()
}
)
)
torn %>% ggplot(aes(x=TORN))+
geom_histogram(color="darkblue", fill="lightblue", boundary=0)+
scale_y_continuous(breaks = scales::pretty_breaks(n=10))+
scale_x_log10(breaks = x_breaks,
labels = trans_format("log10", math_format(10^.x)))
x_breaks = c(10^(-4),10^(-3),10^(-2),10^(-1), 1, 10, 10^2)
torn %>% ggplot(aes(x=TORN))+
geom_histogram(color="darkblue", fill="lightblue", boundary=0)+
scale_y_continuous(breaks = scales::pretty_breaks(n=10))+
scale_x_log10(breaks = x_breaks,
labels = trans_format("log10", math_format(10^.x)))
library(ggnewscale)
x_breaks = c(10^(-4),10^(-3),10^(-2),10^(-1), 1, 10, 10^2)
torn %>% ggplot(aes(x=TORN))+
geom_histogram(color="darkblue", fill="lightblue", boundary=0)+
scale_y_continuous(breaks = scales::pretty_breaks(n=10))+
scale_x_log10(breaks = x_breaks,
labels = trans_format("log10", math_format(10^.x)))
library(scales)
torn %>% ggplot(aes(x=TORN))+
geom_histogram(color="darkblue", fill="lightblue", boundary=0)+
scale_y_continuous(breaks = scales::pretty_breaks(n=10))+
scale_x_log10(breaks = x_breaks,
labels = trans_format("log10", math_format(10^.x)))
x_breaks = c(10^(-2),10^(-1), 1, 10, 10^2,10^3, 10^4)
torn %>% ggplot(aes(x=TORN))+
geom_histogram(color="darkblue", fill="lightblue", boundary=0)+
scale_y_continuous(breaks = scales::pretty_breaks(n=10))+
scale_x_log10(breaks = x_breaks,
labels = trans_format("log10", math_format(10^.x)))
x_breaks = c(10^(-2),10^(-1), 1, 10, 10^2,10^3, 10^4)
torn %>% ggplot(aes(x=TORN))+
geom_histogram(color="darkblue", fill="lightblue", boundary=0)+
scale_y_continuous(breaks = scales::pretty_breaks(n=10))+
scale_x_log10(breaks = x_breaks,
labels = trans_format("log10", math_format(10^.x)))+
labs(title = "Distribution of TORN Tokens", x = "TORN Tokens")
scaleFUN <- function(x) sprintf("%.2f", x)
x_breaks = c(10^(-2),10^(-1), 1, 10, 10^2,10^3, 10^4)
torn %>% ggplot(aes(x=TORN))+
geom_histogram(color="darkblue", fill="lightblue", boundary=0)+
scale_y_continuous(breaks = scales::pretty_breaks(n=10))+
scale_x_log10(breaks = x_breaks,
labels = scaleFUN)+
labs(title = "Distribution of TORN Tokens", x = "TORN Tokens")
scaleFUN <- function(x) sprintf("%.2f", x)
x_breaks = c(0.01,0.05,0.1,0.5, 1, 5, 10,50,100,500,1000)
torn %>% ggplot(aes(x=TORN))+
geom_histogram(color="darkblue", fill="lightblue", boundary=0)+
scale_y_continuous(breaks = scales::pretty_breaks(n=10))+
scale_x_log10(breaks = x_breaks,
labels = scaleFUN)+
labs(title = "Distribution of TORN Tokens", x = "TORN Tokens")
scaleFUN <- function(x) sprintf("%.2f", x)
x_breaks = c(0.01,0.05,0.1,0.5, 1, 5, 10,50,100,500,1000)
torn %>% ggplot(aes(x=TORN))+
geom_histogram(color="darkblue", fill="lightblue", boundary=0)+
scale_y_continuous(breaks = scales::pretty_breaks(n=10))+
scale_x_log10(breaks = x_breaks,
labels = scaleFUN)+
labs(title = "Distribution of TORN Tokens", x = "TORN Tokens")+
theme(axis.text.x = element_text(angle = 30, vjust=0.9))
scaleFUN <- function(x) sprintf("%.2f", x)
x_breaks = c(0.01,0.05,0.1,0.5, 1, 5, 10,50,100,500,1000)
torn %>% ggplot(aes(x=TORN))+
geom_histogram(color="darkblue", fill="lightblue", boundary=0)+
scale_y_continuous(breaks = scales::pretty_breaks(n=10))+
scale_x_log10(breaks = x_breaks,
labels = scaleFUN)+
labs(title = "Distribution of TORN Tokens", x = "TORN Tokens")+
theme(axis.text.x = element_text(angle = 45, vjust=0.9))
scaleFUN <- function(x) sprintf("%.2f", x)
x_breaks = c(0.01,0.03,0.1,0.3, 1, 3, 10,30,100,300,1000)
torn %>% ggplot(aes(x=TORN))+
geom_histogram(color="darkblue", fill="lightblue", boundary=0)+
scale_y_continuous(breaks = scales::pretty_breaks(n=10))+
scale_x_log10(breaks = x_breaks,
labels = scaleFUN)+
labs(title = "Distribution of TORN Tokens", x = "TORN Tokens")+
theme(axis.text.x = element_text(angle = 45, vjust=0.9))
