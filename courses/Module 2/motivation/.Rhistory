scale_color_locuszoom() +  labs(title="Predicted Response by pH level", subtitle=" (1) together and (2)separately for response month")
ggplot(combined) +#geom_point(aes(x= pH, y=total, shape=relmon), size=2) +
geom_point(aes(x= mod.fit.hglm, y=pois.gamma$resid, shape=relmon), size =2) + labs(y="Deviance residuals", x="fitted value") +
scale_color_locuszoom()+geom_hline(yintercept = 0, linetype=2)
ggplot(combined) +#geom_point(aes(x= pH, y=total, shape=relmon), size=2) +
geom_point(aes(x= hglm, y=pois.gamma$resid, shape=relmon), size =2) + labs(y="Deviance residuals", x="fitted value") +
scale_color_locuszoom()+geom_hline(yintercept = 0, linetype=2)
ggplot(combined) +#geom_point(aes(x= pH, y=total, shape=relmon), size=2) +
geom_point(aes(x= hglm, y=pois.gamma$resid, shape=relmon), size =2) + labs(y="Studentized residuals", x="fitted value") +
scale_color_locuszoom()+geom_hline(yintercept = 0, linetype=2)
pois.gamma <- hglm(fixed = total ~ pH,
random = ~ 1|cohort,
data=combined,
family = poisson(),
rand.family = Gamma(link=log),
offset=log(m),
fix.disp = 1,
calc.like=TRUE
)
combined$hglm <- exp((pois.gamma$fixef[1]+(pois.gamma$fixef[2]*combined$pH))+log(pois.gamma$ranef)+log(combined$m))
combined$hglm2 <- exp((pois.gamma2$fixef[1]+(pois.gamma2$fixef[2]*combined$pH))+log(pois.gamma2$ranef)+log(combined$m))
combined %>% gather(key=type, value=response, 12:13) %>%
ggplot() + geom_point(aes(x= pH, y=total, shape=relmon), size=2) + geom_point(aes(x= pH, y=response, shape=relmon, color=type), size =2, alpha=.7) + # geom_line(aes(x= pH, y=pois.gamma$null.model$fitted.values, colour=relmon)) +
scale_color_locuszoom() +  labs(title="Predicted Response by pH level", subtitle=" (1) together and (2)separately for response month")
?rep
letters[1:30]
letters[1:26]
c(letters1:26, "aa", "bb", "cc", "dd")
c(letters[1:26], "aa", "bb", "cc", "dd")
combined$cohort2 <- c(letters[1:26], "aa", "bb", "cc", "dd")
model.disp.co <- glm.nb(total~ pH+offset(log(m))+log(cohort2), data=combined)
model.disp.co <- glm.nb(total~ pH+offset(log(m))+cohort2, data=combined)
combined$mod.fit.disp.sep <- fitted(model.disp.co)
combined %>% gather(key=type, value=response, 10:11) %>%
ggplot() + geom_point(aes(x=pH, y=total, shape=relmon), size=2)+geom_point(aes(x=pH, y=response, color=type)) + scale_color_locuszoom() +  labs(title="Predicted Response by pH level", subtitle=" (1) together and (2)separately for response month")
combined
model.disp.sep <- glm.nb(total~ pH+offset(log(m))+release, data=combined)
combined$mod.fit.disp.sep <- fitted(model.disp.co)
model.disp.sep
summart(release)
summary(release)
summary(model.disp.sep)
?hglm
combined %>% gather(key=type, value=response, 10) %>%
ggplot() + geom_point(aes(x=pH, y=total, shape=relmon), size=2)+geom_point(aes(x=pH, y=response, color=type)) + scale_color_locuszoom() +  labs(title="Predicted Response by pH level", subtitle=" (1) together and (2)separately for response month")
summary(model.disp)
summ = summary.glm(model.disp)
summ$deviance
pois.gamma$dev
catch.u %>% group_by(ph, relmon) %>% mutate(gain = cumsum(y)) %>% ggplot() + geom_point(aes(x=monthday, y=gain, color=factor(ph)), alpha=.7)+ geom_line(aes(x=monthday, y=gain, color=factor(ph)), alpha=.7)+facet_grid(relmon~.)+labs(title="Catch data by pH level", x="Catch Date", y="# caught") + scale_color_manual(values = getPalette(colourCount)) +theme(legend.position = "bottom")
?legend.position
ggplot(environ.long, aes(x=julian, y=measurement, color=type))+ geom_point() + geom_line(aes(group=type)) + # facet_grid(type~., scales = "free_y") + theme(legend.position = "none")+
labs(title="Environmental Variables", x="Julian Date", y="Measurement") + scale_color_locuszoom()+theme(legend.position = "bottom")
ggplot(combined) + geom_point(aes(x= pH, y=prop, color=relmon, shape=relmon), size=2)+ labs(title="Response by pH level")+ scale_color_locuszoom() + theme(legend.position="bottom")
summary(pois.gamma)
install.packages("ggmosaic")
install.packages("ggplot2")
library(knitr)
knitr::opts_chunk$set(message=FALSE, warning=FALSE, echo = FALSE, out.width = '50%', fig.align = "center")
ggplot(data = fly) + geom_mosaic(aes(x=product(Gender, Child18), fill=RudeToBringBaby, alpha=Gender), na.rm=T, divider=ddecker())+   scale_fill_locuszoom()+theme_hc() + theme(axis.text.y = element_blank()) +
labs(x="Gender, Child under 18", title="Is it rude to bring a baby?", subtitle="Broken down by whether respondent has a child under 18 and gender") +  scale_alpha_manual(values=c(0.9,0.7))
library(tidyverse)
library(ggmosaic)
ggplot(data = fly) + geom_mosaic(aes(x=product(Gender, Child18), fill=RudeToBringBaby, alpha=Gender), na.rm=T, divider=ddecker())+   scale_fill_locuszoom()+theme_hc() + theme(axis.text.y = element_blank()) +
labs(x="Gender, Child under 18", title="Is it rude to bring a baby?", subtitle="Broken down by whether respondent has a child under 18 and gender") +  scale_alpha_manual(values=c(0.9,0.7))
library(curl)
library(forcats)
library(ggsci)
library(ggthemes)
fly <- read_csv( curl("https://raw.githubusercontent.com/fivethirtyeight/data/master/flying-etiquette-survey/flying-etiquette.csv"))
names(fly) <- c("ID", "FlightFreq", "DoYouRecline", "Height", "Child18",
"Seats3_2Arms", "Seats2_1Arm", "WhoControlsWindowShade",
"RudeToMoveToUnsoldSeat", "RudeToTalkToNeighbor",
"6hrFlightRudeToLeaveSeat", "RecliningObligationToBehind",
"RudeToRecline", "EliminateReclining", "RudeToSwitchSeatsForFriends",
"RudeToSwitchSeatsForFamily", "RudeToWakeNeighborForBathroom",
"RudeToWakeNeighborForWalk", "RudeToBringBaby",
"RudeToBringUnrulyChild", "UseElectronicsDuringTakeoff",
"HaveYouSmoked", "Gender", "Age", "HouseholdIncome", "Education", "Region")
fly$DoYouRecline <- fct_relevel(fly$DoYouRecline, c("Always", "Usually", "About half the time", "Once in a while"))
fly$RudeToRecline <- fct_relevel(fly$RudeToRecline, c("Yes, very rude", "Yes, somewhat rude"))
fly$FlightFreq <- fct_relevel(fly$FlightFreq, c("Every day", "A few times per week" , "A few times per month","Once a month or less",  "Once a year or less" ,"Never"  ) )
levels(fly$RecliningObligationToBehind) <- c("No", "Yes")
fly$HouseholdIncome <- fct_relevel(fly$HouseholdIncome, c( "$0 - $24,999" ,"$25,000 - $49,999", "$50,000 - $99,999" , "$100,000 - $149,999", "150000"))
levels(fly$HouseholdIncome)[5]<- "150,000 or more"
ggplot(data = fly) +
geom_mosaic(aes(x=product(HouseholdIncome), fill=FlightFreq), divider=ddecker(), na.rm=T) +
labs(x="Household Income", title="How frequently do you fly?", subtitle="Broken down by household income") +   scale_fill_locuszoom()+theme_hc() + theme(axis.text.y = element_blank())
ggplot(data = fly) + geom_mosaic(aes(x=product(Gender, Child18), fill=RudeToBringBaby, alpha=Gender), na.rm=T, divider=ddecker())+   scale_fill_locuszoom()+theme_hc() + theme(axis.text.y = element_blank()) +
labs(x="Gender, Child under 18", title="Is it rude to bring a baby?", subtitle="Broken down by whether respondent has a child under 18 and gender") +  scale_alpha_manual(values=c(0.9,0.7))
devtools::install_github("gbasulto/solefinder")
install.packages("V8")
library(shiny); runApp('Documents/temp/clear_data_ex.R')
pchisq(1700.2, 58)
1-pchisq(1700.2, 58)
signif(1-pchisq(1700.2, 58), digits=10)
signif(1-pchisq(614.65, 58), digits=10)
log(5)
(log(5)-4.37)/(-0.162)
1/.162
(-log(5)+4.37)/((-0.162)^2)
(-0.162)^2
dhat=c(-6.17284,105.1883)
v=c(1.051970*(10^(-3)), 2.433540*(10^(-5)))
v
v=matrix(v[1], -9.179444*(10^(-05)), -9.179444*(10^(-05)), v[4])
v=matrix(c(1.051970*(10^(-3)), -9.179444*(10^(-05)), -9.179444*(10^(-05)), 2.433540*(10^(-5))))
v
v=matrix(c(1.051970*(10^(-3)), -9.179444*(10^(-05)), -9.179444*(10^(-05)), 2.433540*(10^(-5))), nrow =2)
v
dhat %*% v
t(dhat) %*% v
t(dhat) %*% v %*% dhat
sd = sqrt(t(dhat) %*% v %*% dhat)
17.04051 + (2*sd)
17.04051 - (2*sd)
b=c(4.37, -0.162)
h=(log(5)-b[1])/b[2]
h
Dhat=c(-1/b[2],(b[1]-log(5))/b[2]Ë†2)
Dhat=c(-1/b[2],(b[1]-log(5))/b[2]^2)
> seh=sqrt(t(Dhat)%*%v%*%Dhat)
seh=sqrt(t(Dhat)%*%v%*%Dhat)
ci=c(h-2*seh,h+2*seh)
ci
seh
sd
dhat
Dhat
dhat=c(6.17284,105.1883)
sd = sqrt(t(dhat) %*% v %*% dhat)
17.04051 + (2*sd)
17.04051 - (2*sd)
?pchisq
pchisq(1, df =  3)
pchisq(1.5, df =  3)
pchisq(.5, df =  3)
pchisq(.25, df =  3)
pchisq(.3, df =  3)
pchisq(.4, df =  3)
pchisq(.4, df =  60)
pchisq(1, df =  60)
pchisq(100,60-2)
1-pchisq(100,60-2)
1-pchisq(60,60-2)
1-pchisq(58,60-2)
1-pchisq(40,20)
1-pchisq(20,20)
1-pchisq(0.4,2)
p=c(48,6,14,20,8,18,30,20)
p*.7
116*.7
pchisq(614.65, 58)
signif(pchisq(614.65, 58), digits=20)
signif(1-pchisq(614.65, 58), digits=20)
2
signif(1-pchisq(614.65, 2), digits=20)
log(1)
-1.77741+0.64373+(0.02247*25)+0.91912-1.68658
exp(-1.77741+0.64373+(0.02247*25)+0.91912-1.68658)
1/exp(-1.77741+0.64373+(0.02247*25)+0.91912-1.68658)
(1/exp(-1.77741+0.64373+(0.02247*25)+0.91912-1.68658))+1
1/((1/exp(-1.77741+0.64373+(0.02247*25)+0.91912-1.68658))+1)
(9/6)+(5/18)
sqrt((9/6)+(5/18))
4/(sqrt((9/6)+(5/18)))
(0.1^2)+(0.3^2)+(0.6^2)
.46*(16/3)
23*8
184/75
66.8-68.6
-1.8-(1.96*sqrt(184/75))
-1.8+(1.96*sqrt(184/75))
583.8451-576.2365
2.0094-(2*0.1454)
2.0094+(2*0.1454)
exp(2.0094+(2*0.1454))
exp(2.0094-(2*0.1454))
19*12/169
?f
?pf
1-pf(1.349, 13, 12)
((19-13)/1)/(13/12)
1-pf(5.538, 1, 12)
(16*log(66/16))+(1*log(16))
(16*log(61/16))+(2*log(16))
(16*log(66/16))+(1*log(16))+(16/(2*(log(2*pi)-1)))
(16*log(66/16))+(1*log(16))+(16/2*(log(2*pi)-1))
66/16
log(4.125)
1.417066*16
log(16)
-2*((-16/2*(log(2*pi)-1))-(16*log(66/16)/2))
(-2*((-16/2*(log(2*pi)-1))-(16*log(66/16)/2)))+(1*log(16))
(-2*((-16/2*(log(2*pi)-1))-(16*log(66/16)/2)))+(15*log(16))
(-2*((-16/2*(log(2*pi)-1))-(16*log(13/16)/2)))+(4*log(16))
bb <- function(r, k){
(-2*((-16/2*(log(2*pi)-1))-(16*log(r/16)/2)))+(k*log(16))
}
dat <- data.frame(rss= c(66,61,65,56,19,15,19,13), kk=c(1,2,2,3,2,3,3,4))
bb(dat$rss, dat$kk)
library(boxr)
box_auth()
library(dplyr)
library(magrittr)
feat1 <- box_search("Features_1.csv") %>%                # Find a remote file
box_read()                                   # Download it as a data.frame
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
data(iris)
library(tidyverse)
ggplot(iris) + geom_point(aes(x= Sepal.Length, y=Sepal.Width, colour = Species))
knitr::kable(head(iris), format = 'html')
ggplot(iris) + geom_point(aes(x= Sepal.Length, y=Sepal.Width, colour = Species))
ggplot(iris) + geom_point(aes(x= Sepal.Length, y=Sepal.Width, colour = Species))
data(mtcars)
data(diamonds)
p1 <- ggplot(diamonds, aes(cut, fill=cut)) + geom_bar()
p2 <- ggplot(diamonds, aes(factor(1), fill=cut)) + geom_bar(width=1) + labs(x="")
p3 <- ggplot(diamonds, aes(factor(1), fill=cut)) + geom_bar(width=1) + coord_polar(theta= "y") + labs(x="")
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1)
library(gridExtra)
library(grid)
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1)
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1)
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(tidyverse)
library(ggsci)
library(ggthemes)
library(gridExtra)
library(grid)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
# return gtable invisibly
invisible(combined)
}
data(iris)
ggplot(iris) + geom_point(aes(x= Sepal.Length, y=Sepal.Width, colour = Species))
library(ggmosaic)
ggplot(iris) + geom_point(aes(x= Sepal.Length, y=Sepal.Width, colour = Species))
ggplot(iris) + geom_point(aes(x= Sepal.Length, y=Sepal.Width, colour = Species))
library(ggmosaic)
data(diamonds)
diamonds
i3 <- ggplot(diamonds) + geom_mosaic(aes(x=product(cut), fill = color))+scale_fill_grey(start=0.2, end= 0.7) + theme(legend.position = "none") + labs(x="", y="", title="Mosaic Plot")
i3
library(ggmosaic)
ggplot(diamonds) + geom_mosaic(aes(x=product(color), fill = cut))+scale_fill_grey(start=0.2, end= 0.7) + theme(legend.position = "none") + labs(x="", y="", title="Mosaic Plot")
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(ggsci)
library(ggthemes)
library(gridExtra)
library(grid)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
# return gtable invisibly
invisible(combined)
}
data(mtcars)
p1 <- ggplot(mtcars, aes(factor(cyl), fill = factor(cyl))) + geom_bar() + labs(x="Cyl", title = "Bar Chart")+scale_fill_grey(start=0.2, end= 0.8, name = "cyl")+theme(legend.position = "none")
p2 <- ggplot(mtcars, aes(factor(1), fill = factor(cyl))) + geom_bar(width=1) + coord_polar(theta="y") + labs(x="", title = "Pie Chart")+scale_fill_grey(start=0.2, end= 0.8, name = "cyl")+theme(legend.position = "none")
p3 <- ggplot(iris, aes(Sepal.Length)) + geom_histogram(bins=20)+ labs(x="", title = "Histogram")
#p3 <- png("stem-and-leaf.png")
#p3
p4 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()+ labs(x="", y="", title = "Scatterplot")
data <- data.frame(murder=USArrests$Murder, state=tolower(rownames(USArrests)))
map <- map_data("state")
map2 <- map %>% filter(region == "iowa")
p5 <- data %>% filter(state == "iowa") %>% ggplot() + geom_map(aes(map_id=state), map=map2, fill = "grey33") + expand_limits(x = map2$long, y = map2$lat)+ labs(title = "Map")
grid.arrange(p1, p2, p3, p4, p5, ncol = 5, nrow = 1)
iris2 <- iris %>% mutate(obs = 1:150) %>% gather(variable, value, -c(obs, Species))
i1 <- ggplot()+ labs(x="", y="", title="Cartogram")
library(GGally)
i2 <- ggparcoord(data = iris, columns = 1:4, groupColumn = 5) +scale_colour_grey(start=0.2, end= 0.7) + theme(legend.position = "none")+ labs(x="", y="", title="Parallel Coordinates")
data(diamonds)
library(ggmosaic)
i3 <- ggplot(diamonds) + geom_mosaic(aes(x=product(color), fill = cut))+scale_fill_grey(start=0.2, end= 0.7) + theme(legend.position = "none") + labs(x="", y="", title="Mosaic Plot")
library(ggradar)
suppressPackageStartupMessages(library(dplyr))
library(scales)
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_each(funs(rescale), -group) %>%
tail(4) %>% select(1:10) -> mtcars_radar
i4 <-ggradar(mtcars_radar, group.line.width = .7,
group.point.size = 2, axis.label.size = 3.5, grid.label.size = 2.5, background.circle.transparency = 0.1, plot.legend =FALSE)+scale_colour_grey(start=0.4, end= 0.9)+ theme(legend.position = "none") + labs(x="", y="", title="Radar Charts")
df.team_data <- expand.grid(teams = c("Team A", "Team B", "Team C", "Team D") ,metrics = c("Metric 1", "Metric 2", "Metric 3", "Metric 4", "Metric 5"))
# add variable: performance
set.seed(41)
df.team_data$performance <- rnorm(nrow(df.team_data))
i5 <-ggplot(data = df.team_data, aes(x = metrics, y = teams)) +
geom_tile(aes(fill = performance)) + scale_fill_distiller(palette = "Greys")+ theme(legend.position = "none") + labs(x="", y="", title="Heat Map")
grid.arrange(i1, i2, i3, i4, i5, ncol = 5, nrow = 1)
a1 <- ggplot(diamonds, aes(depth)) +
geom_density(aes(fill = cut), alpha = .8) +
xlim(55, 70) + labs(x="", y="", title="Density Plot")+scale_colour_grey(start=0.6, end= 0.9)+scale_fill_grey(start=0.6, end= 0.9) + theme(legend.position = "none")
a2 <- ggplot(diamonds, aes(cut, price)) + geom_violin(aes(fill = cut), alpha = .8) + labs(x="", y="", title="Violin Plot")+scale_fill_grey(start=0.6, end= 0.9) + theme(legend.position = "none")
library(geomnet)
data(blood)
a3 <- ggplot(data = blood$edges, aes(from_id = from, to_id = to)) +
geom_net(vertices=blood$vertices, aes(colour=..type..)) +
theme_net() +scale_colour_grey(start=0.4, end= 0.9)+ theme(legend.position = "none") + labs(x="", y="", title="Network Plot")
grid.arrange(a1, a2, a3, ncol = 3, nrow = 1)
data(iris)
iris
ggplot(iris) + geom_point(aes(x= Petal.Length, y=Petal.Width, colour = Species))
ggplot(iris) + geom_point(aes(x= Petal.Length, y=Petal.Width, colour = Species))
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(ggsci)
library(ggthemes)
library(gridExtra)
library(grid)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
# return gtable invisibly
invisible(combined)
}
data(iris)
knitr::kable(head(iris), format = 'html')
data(iris)
ggplot(iris) + geom_point(aes(x= Sepal.Length, y=Sepal.Width, colour = Species))
data(mtcars)
p1 <- ggplot(mtcars, aes(factor(cyl), fill = factor(cyl))) + geom_bar() + labs(x="Cyl", title = "Bar Chart")+scale_fill_grey(start=0.2, end= 0.8, name = "cyl")+theme(legend.position = "none")
p2 <- ggplot(mtcars, aes(factor(1), fill = factor(cyl))) + geom_bar(width=1) + coord_polar(theta="y") + labs(x="", title = "Pie Chart")+scale_fill_grey(start=0.2, end= 0.8, name = "cyl")+theme(legend.position = "none")
p3 <- ggplot(iris, aes(Sepal.Length)) + geom_histogram(bins=20)+ labs(x="", title = "Histogram")
#p3 <- png("stem-and-leaf.png")
#p3
p4 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()+ labs(x="", y="", title = "Scatterplot")
data <- data.frame(murder=USArrests$Murder, state=tolower(rownames(USArrests)))
map <- map_data("state")
map2 <- map %>% filter(region == "iowa")
p5 <- data %>% filter(state == "iowa") %>% ggplot() + geom_map(aes(map_id=state), map=map2, fill = "grey33") + expand_limits(x = map2$long, y = map2$lat)+ labs(title = "Map")
grid.arrange(p1, p2, p3, p4, p5, ncol = 5, nrow = 1)
# library(devtools)
# devtools::install_github("mangothecat/fftw3")
# install_github('omegahat/Rcartogram')
# ## Wait for installation, then:
# install_github('chrisbrunsdon/getcartr', subdir='getcartr')
#
# library(Rcartogram)
# library(getcartr)
# library(ggplot2)
# world <- readShapePoly('TM_WORLD_BORDERS-0.3.shp')
# ## We are using the world's population data from World Bank
# world.pop <- read.csv(file = 'sp.pop.totl_Indicator_en_csv_v2.csv', stringsAsFactors = FALSE)
# ## Create a smaller dataset by retaining the world's population in 2013 and the ISO3
# ## country code, which will be used for matching and merging with the input shapefile
# smaller.data <- data.frame(Country.Code = world.pop$Country.Code, Population = world.pop$X2013)
# smaller.data <- na.omit(smaller.data)
#
# ## Join the two datasets using their common field
# matched.indices <- match(world@data[, "ISO3"], smaller.data[, "Country.Code"])
# world@data <- data.frame(world@data, smaller.data[matched.indices, ])
# ## Compute the cartogram transformation of each country using its population
# ## with the degree of Gaussian blur = 0.5 (otherwise, it may not work)
# world.carto <- quick.carto(world, world@data$Population, blur = 0.5)
#
# ## Convert the object into data frame
# world.f <- fortify(world.carto, region = "Country.Code")
# ## Merge the cartogram transformation with the world map shapefile
# world.f <- merge(world.f, world@data, by.x = "id", by.y = "Country.Code")
# ## Make a plot of the transformed polygons, where each country is
# ## further shaded by their population size (lighter means bigger)
# my_map <- ggplot(world.f, aes(long, lat, group = group, fill = world.f$Population)) + geom_polygon()
# ## Display the plot and give it a title
# (my_map <- my_map + ggtitle("Cartogram of the World Population (2013)"))
iris2 <- iris %>% mutate(obs = 1:150) %>% gather(variable, value, -c(obs, Species))
i1 <- ggplot()+ labs(x="", y="", title="Cartogram")
library(GGally)
i2 <- ggparcoord(data = iris, columns = 1:4, groupColumn = 5) +scale_colour_grey(start=0.2, end= 0.7) + theme(legend.position = "none")+ labs(x="", y="", title="Parallel Coordinates")
data(diamonds)
library(ggmosaic)
i3 <- ggplot(diamonds) + geom_mosaic(aes(x=product(color), fill = cut))+scale_fill_grey(start=0.2, end= 0.7) + theme(legend.position = "none") + labs(x="", y="", title="Mosaic Plot")
library(ggradar)
suppressPackageStartupMessages(library(dplyr))
library(scales)
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_each(funs(rescale), -group) %>%
tail(4) %>% select(1:10) -> mtcars_radar
i4 <-ggradar(mtcars_radar, group.line.width = .7,
group.point.size = 2, axis.label.size = 3.5, grid.label.size = 2.5, background.circle.transparency = 0.1, plot.legend =FALSE)+scale_colour_grey(start=0.4, end= 0.9)+ theme(legend.position = "none") + labs(x="", y="", title="Radar Charts")
df.team_data <- expand.grid(teams = c("Team A", "Team B", "Team C", "Team D") ,metrics = c("Metric 1", "Metric 2", "Metric 3", "Metric 4", "Metric 5"))
# add variable: performance
set.seed(41)
df.team_data$performance <- rnorm(nrow(df.team_data))
i5 <-ggplot(data = df.team_data, aes(x = metrics, y = teams)) +
geom_tile(aes(fill = performance)) + scale_fill_distiller(palette = "Greys")+ theme(legend.position = "none") + labs(x="", y="", title="Heat Map")
grid.arrange(i1, i2, i3, i4, i5, ncol = 5, nrow = 1)
a1 <- ggplot(diamonds, aes(depth)) +
geom_density(aes(fill = cut), alpha = .8) +
xlim(55, 70) + labs(x="", y="", title="Density Plot")+scale_colour_grey(start=0.6, end= 0.9)+scale_fill_grey(start=0.6, end= 0.9) + theme(legend.position = "none")
a2 <- ggplot(diamonds, aes(cut, price)) + geom_violin(aes(fill = cut), alpha = .8) + labs(x="", y="", title="Violin Plot")+scale_fill_grey(start=0.6, end= 0.9) + theme(legend.position = "none")
library(geomnet)
data(blood)
a3 <- ggplot(data = blood$edges, aes(from_id = from, to_id = to)) +
geom_net(vertices=blood$vertices, aes(colour=..type..)) +
theme_net() +scale_colour_grey(start=0.4, end= 0.9)+ theme(legend.position = "none") + labs(x="", y="", title="Network Plot")
grid.arrange(a1, a2, a3, ncol = 3, nrow = 1)
data(diamonds)
p1 <- ggplot(diamonds, aes(cut, fill=cut)) + geom_bar() + labs(title = "Bar Chart", subtitle = "Cartesian coordinates")
p2 <- ggplot(diamonds, aes(factor(1), fill=cut)) + geom_bar(width=1) + labs(x="", title = "Fill-Bar", subtitle = "Cartesian coordinates")
p3 <- ggplot(diamonds, aes(factor(1), fill=cut)) + geom_bar(width=1) + coord_polar(theta= "y") + labs(x="", title = "Fill-Bar", subtitle = "Polar coordinates")
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1)
data(iris)
ggplot(iris) + geom_point(aes(x= Petal.Length, y=Petal.Width, colour = Species))
ggplot(iris) + geom_point(aes(x= Petal.Length, y=Petal.Width, colour = Species))
```{r, fig.align='center', fig.height=4, fig.width=6}
ggplot(iris) + geom_point(aes(x= Petal.Length, y=Petal.Width, colour = Species))
ggplot(iris) + geom_point(aes(x= Petal.Length, y=Petal.Width, colour = Species))
ggplot(data = iris, mapping = aes(x = Petal.Length, y = Petal.Width)) + geom_point()
ggplot(data = iris, mapping = aes(x = Petal.Length, y = Petal.Width)) + geom_point()
p <- ggplot(data = iris, mapping = aes(x = Petal.Length, y = Petal.Width))
p
p + geom_point()
p + geom_point(aes(color = Species))
p1 <- ggplot(data = iris, mapping = aes(x = Petal.Length, y = Petal.Width))
p2 <- p + geom_point()
P3 <- p + geom_point(aes(color = Species))
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1)
P3 <- p + geom_point(aes(color = Species))
p3 <- p + geom_point(aes(color = Species))
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1)
```{r, fig.align='center', fig.height=5, fig.width=10}
grid.arrange(p1, p2, ncol = 2, nrow = 1)
View(grid_arrange_shared_legend)
grid_arrange_shared_legend(p1, p2, p3, ncol = 2, nrow = 1, position = "right")
grid_arrange_shared_legend(p1, p2, p3, ncol = 3, nrow = 1, position = "right")
grid_arrange_shared_legend(p1, p2, p3, ncol = 3, nrow = 1, position = "right")
grid_arrange_shared_legend(p3, p2, p3, ncol = 3, nrow = 1, position = "right")
grid_arrange_shared_legend(p1, p2, p3, ncol = 3, nrow = 1, position = "right")
grid_arrange_shared_legend(p3, p2, p1, ncol = 3, nrow = 1, position = "right")
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1)
p3 <- p + geom_point(aes(color = Species)) + theme(legend.position = "none")
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1)
setwd("~/Documents/omni/Visualization Course Materials/motivation")
